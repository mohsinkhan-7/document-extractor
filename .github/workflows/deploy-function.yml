name: Deploy Function App (Container) - dev

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AZURE_ENV_NAME: dev
  AZURE_LOCATION: eastus2
  IMAGE_NAME: document-extractor-func
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate OIDC inputs
        shell: bash
        run: |
          missing=()
          [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] && missing+=(AZURE_CLIENT_ID)
          [ -z "${{ secrets.AZURE_TENANT_ID }}" ] && missing+=(AZURE_TENANT_ID)
          [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] && missing+=(AZURE_SUBSCRIPTION_ID)
          if [ ${#missing[@]} -ne 0 ]; then
            echo "Required GitHub secrets are missing for OIDC login: ${missing[*]}" 1>&2
            echo "Add these as environment secrets on the 'dev' environment (or repo-level secrets) and re-run." 1>&2
            exit 1
          fi

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure resource providers are registered
        shell: bash
        run: |
          set -e
          for rp in Microsoft.Web Microsoft.ContainerRegistry Microsoft.Insights Microsoft.ManagedIdentity Microsoft.Storage; do
            az provider register --namespace $rp --wait
          done

      - name: Verify Azure principal
        id: whoami
        shell: bash
        env:
          EXPECTED_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        run: |
          set -e
          # Show current account and principal (safe)
          az account show --query '{name:name, id:id, tenantId:tenantId, user:user}' -o json
          # Extract the logged-in principal clientId (for service principals, user.name is the clientId)
          CURRENT_CLIENT_ID=$(az account show --query 'user.name' -o tsv || true)
          if [ -z "$CURRENT_CLIENT_ID" ]; then
            echo "Could not determine logged-in principal" 1>&2
            exit 1
          fi
          if [ "$CURRENT_CLIENT_ID" != "$EXPECTED_CLIENT_ID" ]; then
            echo "Logged in as unexpected client-id: $CURRENT_CLIENT_ID" 1>&2
            echo "Fix: Update AZURE_CLIENT_ID secret to the correct App (the one with federated credential and role assignments), or grant this principal Contributor on the subscription/RG." 1>&2
            exit 1
          fi

      - name: Resolve subscription and resource group
        id: rg
        shell: bash
        run: |
          SUB_ID=$(az account show --query id -o tsv)
          echo "sub_id=$SUB_ID" >> $GITHUB_OUTPUT
          # create RG if not exists
          RG_NAME=rg-doc-extractor-func-${AZURE_ENV_NAME}
          az group create -n $RG_NAME -l ${AZURE_LOCATION}
          echo "rg_name=$RG_NAME" >> $GITHUB_OUTPUT

      - name: Deploy infra (Bicep)
        id: bicep
        run: |
          set -e
          az deployment group create \
            -g ${{ steps.rg.outputs.rg_name }} \
            -n functionapp \
            -f infra/functionapp.bicep \
            -p @infra/functionapp.parameters.json \
            -p location=${AZURE_LOCATION} environmentName=${AZURE_ENV_NAME}
          # verify deployment success
          STATE=$(az deployment group show -g ${{ steps.rg.outputs.rg_name }} -n functionapp --query properties.provisioningState -o tsv || echo "")
          if [ "$STATE" != "Succeeded" ]; then
            echo "Deployment did not succeed (state=$STATE). Showing operations..." 1>&2
            az deployment operation group list -g ${{ steps.rg.outputs.rg_name }} -n functionapp -o table || true
            exit 1
          fi
          # capture outputs
          ACR_SERVER=$(az deployment group show -g ${{ steps.rg.outputs.rg_name }} -n functionapp --query properties.outputs.ACR_LOGIN_SERVER.value -o tsv || true)
          FUNC_NAME=$(az deployment group show -g ${{ steps.rg.outputs.rg_name }} -n functionapp --query properties.outputs.FUNCTION_APP_NAME.value -o tsv || true)
          echo "acr_login_server=$ACR_SERVER" >> $GITHUB_OUTPUT
          echo "func_name=$FUNC_NAME" >> $GITHUB_OUTPUT

      - name: Wait for Function App resource
        shell: bash
        run: |
          set -e
          FUNC_NAME=${{ steps.bicep.outputs.func_name }}
          if [ -z "$FUNC_NAME" ]; then
            FUNC_NAME=$(az functionapp list -g ${{ steps.rg.outputs.rg_name }} --query "[0].name" -o tsv)
          fi
          if [ -z "$FUNC_NAME" ]; then
            echo "Function App name not found after deployment." 1>&2
            az functionapp list -g ${{ steps.rg.outputs.rg_name }} -o table || true
            exit 1
          fi
          echo "Waiting for Function App $FUNC_NAME provisioningState=Succeeded..."
          for i in {1..30}; do
            STATE=$(az functionapp show -g ${{ steps.rg.outputs.rg_name }} -n "$FUNC_NAME" --query "properties.state" -o tsv 2>/dev/null || true)
            PROV=$(az functionapp show -g ${{ steps.rg.outputs.rg_name }} -n "$FUNC_NAME" --query "provisioningState" -o tsv 2>/dev/null || true)
            if [ "$PROV" = "Succeeded" ] || [ "$STATE" = "Running" ]; then
              echo "Function App is ready: state=$STATE provisioningState=$PROV"
              break
            fi
            sleep 10
          done

      - name: Get ACR login server
        id: acr
        run: |
          ACR_SERVER=${{ steps.bicep.outputs.acr_login_server }}
          if [ -z "$ACR_SERVER" ]; then
            ACR_SERVER=$(az acr list --resource-group ${{ steps.rg.outputs.rg_name }} --query "[0].loginServer" -o tsv)
          fi
          if [ -z "$ACR_SERVER" ]; then
            echo "ACR login server not found. Check deployment outputs and that ACR exists in the resource group." 1>&2
            az acr list --resource-group ${{ steps.rg.outputs.rg_name }} -o table || true
            exit 1
          fi
          echo "login_server=$ACR_SERVER" >> $GITHUB_OUTPUT

      - name: Build and push image
        run: |
          az acr login --name $(echo ${{ steps.acr.outputs.login_server }} | cut -d. -f1)
          IMAGE=${{ steps.acr.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker build -f Dockerfile.functions -t $IMAGE .
          docker push $IMAGE

      - name: Update Function App to new image (preserve ACR MI)
        run: |
          set -e
          FUNC_NAME=${{ steps.bicep.outputs.func_name }}
          if [ -z "$FUNC_NAME" ]; then
            FUNC_NAME=$(az functionapp list -g ${{ steps.rg.outputs.rg_name }} --query "[0].name" -o tsv)
          fi
          if [ -z "$FUNC_NAME" ]; then
            echo "Function App name not found. Check deployment outputs and RG contents." 1>&2
            az functionapp list -g ${{ steps.rg.outputs.rg_name }} -o table || true
            exit 1
          fi
          IMAGE="DOCKER|${{ steps.acr.outputs.login_server }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          # Update only linuxFxVersion to avoid wiping ACR MI settings
          az resource update \
            -g ${{ steps.rg.outputs.rg_name }} \
            --resource-type Microsoft.Web/sites/config \
            -n "$FUNC_NAME/web" \
            --set properties.linuxFxVersion="$IMAGE"
          az functionapp restart -g ${{ steps.rg.outputs.rg_name }} -n $FUNC_NAME

      - name: Verify container config
        run: |
          FUNC_NAME=${{ steps.bicep.outputs.func_name }}
          if [ -z "$FUNC_NAME" ]; then
            FUNC_NAME=$(az functionapp list -g ${{ steps.rg.outputs.rg_name }} --query "[0].name" -o tsv)
          fi
          az resource show \
            -g ${{ steps.rg.outputs.rg_name }} \
            --resource-type Microsoft.Web/sites/config \
            -n "$FUNC_NAME/web" \
            --query "properties.{linuxFxVersion:linuxFxVersion,acrUseManagedIdentityCreds:acrUseManagedIdentityCreds,acrUserManagedIdentityID:acrUserManagedIdentityID}" -o table

      - name: Output URL
        run: |
          FUNC_NAME=${{ steps.bicep.outputs.func_name }}
          if [ -z "$FUNC_NAME" ]; then
            FUNC_NAME=$(az functionapp list -g ${{ steps.rg.outputs.rg_name }} --query "[0].name" -o tsv)
          fi
          echo "https://$FUNC_NAME.azurewebsites.net"
